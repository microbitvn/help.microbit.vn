# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-10-25 14:56+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: concepts.md:2
msgid "# Concepts"
msgstr ""

#. type: Plain text
#: concepts.md:9
msgid ""
"The micro:bit runtime provides an easy to use environment for programming "
"the BBC micro:bit in the C/C++ language. It contains device drivers for all "
"the hardware capabilities of the micro:bit, and also a suite of runtime "
"mechanisms to make programming the micro:bit easier and more flexible. These "
"range from control of the LED matrix display to peer-to-peer radio "
"communication and secure Bluetooth Low Energy services. The micro:bit "
"runtime is proudly built on the [ARM mbed](https://www.mbed.com)  and "
"[Nordic nrf51](http://www.nordicsemi.com) platforms."
msgstr ""

#. type: Plain text
#: concepts.md:14
msgid ""
"In addition to supporting development in C/C++, the runtime is also designed "
"specifically to support higher level languages provided by our partners that "
"target the micro:bit. It is currently used as a support library for all the "
"languages on the BBC [www.microbit.co.uk](http://www.microbit.co.uk) "
"website, including Microsoft Block Editor, Microsoft Touch Develop, Code "
"Kingdoms JavaScript and Micropython languages."
msgstr ""

#. type: Plain text
#: concepts.md:16
msgid "![micro:bit runtime](resources/examples/concepts/architecture.png)"
msgstr ""

#. type: Plain text
#: concepts.md:19
msgid "## A Component Based Approach"
msgstr ""

#. type: Plain text
#: concepts.md:24
msgid ""
"Whenever computer scientists tackle large programming problems, we take the "
"time to split the problem into smaller, independent sections to make the "
"problem easier to solve (divide and conquer!).  The micro:bit runtime is no "
"exception, and is made up of a number of smaller components. Each of these "
"components looks after a specific job on the micro:bit."
msgstr ""

#. type: Plain text
#: concepts.md:29
msgid ""
"Building up software like this helps us to write code in a way that is much "
"easier to maintain as the amount of code grows. For example, a component "
"called [MicroBitDisplay](ubit/display.md)  controls the LEDs on the "
"micro:bit, and lets the programmer show images, animations and messages. The "
"[MicroBitIO](ubit/io.md) component controls input and output through the "
"pins on the edge of the device."
msgstr ""

#. type: Plain text
#: concepts.md:32
msgid ""
"The micro:bit runtime is object oriented, with each component typically "
"being a C++ class.  There are over 30 components making up the runtime, and "
"they are documented on these pages."
msgstr ""

#. type: Plain text
#: concepts.md:35
msgid ""
"To make the runtime as easy to use as possible, there is also a grouping of "
"the most commonly used components in an object called [uBit](ubit.md) (The "
"'u' being the greek letter mu - which often refers to 'micro' in scientific "
"units!)."
msgstr ""

#. type: Plain text
#: concepts.md:38
msgid ""
"The uBit object can be used to easily access most of the functionality of "
"the micro:bit. You can find the components and functions that can be "
"accessed this way in the `uBit` in the navigation bar."
msgstr ""

#. type: Plain text
#: concepts.md:40
msgid ""
"To show just how easy it is to get started, the following code shows how you "
"would write a traditional Hello World program."
msgstr ""

#. type: Plain text
#: concepts.md:43
msgid ""
"This uses the uBit object to access the display component, then instructs "
"the display to scroll the given string across the LEDs. Try to use the "
"`uBit` menu tab above to find the documentation for this scroll() function!"
msgstr ""

#. type: Plain text
#: concepts.md:47
msgid "```cpp uBit.display.scroll(\"Hello micro:bit!\"); ```"
msgstr ""

#. type: Plain text
#: concepts.md:50
#, no-wrap
msgid ""
"!!! note\n"
"    Did you know that you don't need to use the uBit object? Advanced users "
"will likely prefer to create only the components they need to conserve "
"memory on the device. See the [advanced](advanced.md) section for how to do "
"this.\n"
msgstr ""

#. type: Plain text
#: concepts.md:53
msgid "# Events"
msgstr ""

#. type: Plain text
#: concepts.md:57
msgid ""
"Computer programs execute sequentially - one line after another, following "
"the logic of the program you have written.  Sometimes though, we want to be "
"able to determine *when* something has happened, and write some code to "
"decide what should happen in that case."
msgstr ""

#. type: Plain text
#: concepts.md:60
msgid ""
"For example, maybe you want to know when a button has been pressed, when "
"your micro:bit has been shaken, or when some data has been sent to you over "
"the device's radio. For these sorts of cases, we create a "
"[MicroBitEvent](data-types/event.md)."
msgstr ""

#. type: Plain text
#: concepts.md:63
msgid "## Creating Events"
msgstr ""

#. type: Plain text
#: concepts.md:68
msgid ""
"Many components will raise events when interesting things occur. For "
"example, ['MicroBitAccelerometer'](ubit/accelerometer.md) will raise events "
"to indicate that the micro:bit has be been shaken, or is in freefall and "
"['MicroBitButton'](ubit/button.md) will send events on a range of button up, "
"down, click and hold events.  Programmers are also free to send their own "
"events whenever they feel it would be useful. `MicroBitEvent`s are *very* "
"simple, and consist of only two numbers:"
msgstr ""

#. type: Bullet: '  - '
#: concepts.md:71
msgid "`source` - A number identifying the component that created the event."
msgstr ""

#. type: Bullet: '  - '
#: concepts.md:71
msgid "`value` - A number unique to the source that identifies the event."
msgstr ""

#. type: Plain text
#: concepts.md:75
msgid ""
"The documentation for each component defines its event source, and all the "
"events it may generate, and also gives a name to these event values. For "
"example, take a look at the [button documentation](ubit/button.md) to see "
"that the source MICROBIT_ID_BUTTON_A has the value '1', and an event "
"MICROBIT_BUTTON_EVT_CLICK with the value '3' is generated when a button is "
"clicked."
msgstr ""

#. type: Plain text
#: concepts.md:77
msgid ""
"Creating an event is easy - just create a MicroBitEvent with the `source` "
"and `value` you need, and the runtime takes care of the rest:"
msgstr ""

#. type: Plain text
#: concepts.md:81
msgid "```cpp MicroBitEvent(MICROBIT_ID_BUTTON_A, MICROBIT_BUTTON_EVT_CLICK); ```"
msgstr ""

#. type: Plain text
#: concepts.md:84
msgid ""
"Feel free to create your own events lke this too. Just try to avoid using "
"any source ID that is already used by the runtime! :-)  See the "
"[messageBus](ubit/messageBus.md) page for a complete table of the reserved "
"source IDs."
msgstr ""

#. type: Plain text
#: concepts.md:87
msgid "## Detecting Events"
msgstr ""

#. type: Plain text
#: concepts.md:90
msgid ""
"The micro:bit runtime has a component called the "
"[`MicroBitMessageBus`](ubit/messageBus.md), and its job is remember which "
"events your program is interested in, and to deliver `MicroBitEvent`s to "
"your program as they occur."
msgstr ""

#. type: Plain text
#: concepts.md:93
msgid ""
"To find out when an event happens, you need to create a function in your "
"program, then tell the message bus which event you want to attach this "
"function to. This is known as writing an **event handler**."
msgstr ""

#. type: Plain text
#: concepts.md:95
msgid ""
"You write an event handler through the `MicroBitMessageBus` "
"[listen](ubit/messageBus.md) function."
msgstr ""

#. type: Plain text
#: concepts.md:101
#, no-wrap
msgid ""
"```cpp\n"
"void onButtonA(MicroBitEvent e)\n"
"{\n"
"    uBit.display.print(\"A\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: concepts.md:107
#, no-wrap
msgid ""
"int main()\n"
"{\n"
"    uBit.messageBus.listen(MICROBIT_ID_BUTTON_A, MICROBIT_BUTTON_EVT_CLICK, "
"onButtonA);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: concepts.md:109
msgid ""
"Now, whenever the MICROBIT_BUTTON_EVT_CLICK event is raise by "
"MICROBIT_ID_BUTTON_A, your code inside function 'onButtonA' will be "
"automatically executed."
msgstr ""

#. type: Plain text
#: concepts.md:112
msgid ""
"You can call listen as many times as you want to attached functions to each "
"of the events that are useful for your program. In fact, a block like the "
"following in the Microsoft Block language translates into code just like "
"that shown above when it is run on a micro:bit!"
msgstr ""

#. type: Plain text
#: concepts.md:114
msgid ""
"![on button a, equivalent in "
"blocks](resources/examples/concepts/example-listener.png)"
msgstr ""

#. type: Plain text
#: concepts.md:117
msgid "##Wildcard Events"
msgstr ""

#. type: Plain text
#: concepts.md:120
msgid ""
"Sometimes though, you want to capture all events generated by some "
"component. For example, you might want to know when any changes in a button "
"has happened.  In this case, there is a special event value called "
"'MICROBIT_EVT_ANY'. If you call listen with this value, then ALL events from "
"the given source component will be delivered to your function."
msgstr ""

#. type: Plain text
#: concepts.md:122
msgid ""
"You can find out which ones by looking at the `MicroBitEvent` delivered to "
"your function - it contains the `source` and `value` variables that the "
"`MicroBitEvent` was created with."
msgstr ""

#. type: Plain text
#: concepts.md:129
#, no-wrap
msgid ""
"For example, you could write a program like this:\n"
"```cpp\n"
"void onButtonA(MicroBitEvent e)\n"
"{\n"
"    if (e.value == MICROBIT_BUTTON_EVT_CLICK)\n"
"        uBit.display.scroll(\"CLICK\");\n"
msgstr ""

#. type: Plain text
#: concepts.md:133
#, no-wrap
msgid ""
"    if (e.value == MICROBIT_BUTTON_EVT_DOWN)\n"
"        uBit.display.scroll(\"DOWN\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: concepts.md:139
#, no-wrap
msgid ""
"int main()\n"
"{\n"
"    uBit.messageBus.listen(MICROBIT_ID_BUTTON_A, MICROBIT_EVT_ANY, "
"onButtonA);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: concepts.md:141
msgid ""
"If you *REALLY* want even more events, there is also a MICROBIT_ID_ANY "
"source, that allows you to attach a function to event generated from any "
"component."
msgstr ""

#. type: Plain text
#: concepts.md:143
msgid "Use this sparingly though, as this could be quite a lot of events!"
msgstr ""

#. type: Plain text
#: concepts.md:150
#, no-wrap
msgid ""
"The following code would attach the `onEvent` function to receive all the "
"events from the whole runtime:\n"
"```cpp\n"
"void onEvent(MicroBitEvent e)\n"
"{\n"
"    uBit.display.scroll(\"SOMETHING HAPPENED!\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: concepts.md:156
#, no-wrap
msgid ""
"int main()\n"
"{\n"
"    uBit.messageBus.listen(MICROBIT_ID_ANY, MICROBIT_EVT_ANY, onEvent);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: concepts.md:158
msgid "## Queued Events"
msgstr ""

#. type: Plain text
#: concepts.md:160
msgid ""
"When you write an event handler, your function will be called each time the "
"relevant event is raised. But what happens if your handler takes a long time "
"to execute?"
msgstr ""

#. type: Plain text
#: concepts.md:162
msgid ""
"The example above will scroll \"SOMETHING HAPPENED\" whenever any event is "
"raised... but scrolling that message will take several seconds to complete!"
msgstr ""

#. type: Plain text
#: concepts.md:164
msgid ""
"What if another event happens during this time? By default, the runtime will "
"queue any events for your event handler until it has finished what its "
"already doing."
msgstr ""

#. type: Plain text
#: concepts.md:166
msgid ""
"As soon as your handler is finished processing an event, the next one will "
"be delivered (any other event handlers will be unaffected though - just "
"because one event handler is busy, doesn't mean that another one can't "
"receive its events!)."
msgstr ""

#. type: Plain text
#: concepts.md:168
msgid ""
"The runtime does allow you to change this behaviour if you want to "
"though. See the advanced documentation in "
"[MicroBitMessageBus](ubit/messageBus.md) for more details."
msgstr ""

#. type: Plain text
#: concepts.md:171
#, no-wrap
msgid ""
"!!! note\n"
"    More advanced programmers might be interested to know that you can also "
"attach event handler to member function of C++ objects. See the other forms "
"of listen function in [MicroBitMessageBus](ubit/messageBus.md) for more "
"details.\n"
msgstr ""

#. type: Plain text
#: concepts.md:174
msgid "# Concurrency"
msgstr ""

#. type: Plain text
#: concepts.md:177
msgid ""
"It is not uncommon to want to write programs that can do more than one thing "
"at a time. For example, it takes quite a long time to scroll a message over "
"the LED matrix, so what if you want your program to do something else while "
"this is happening?"
msgstr ""

#. type: Plain text
#: concepts.md:179
msgid ""
"Programs that do more than one thing at a time are called **concurrent "
"programs**."
msgstr ""

#. type: Plain text
#: concepts.md:181
msgid "The runtime provides two ways you can achieve concurrency in your programs:"
msgstr ""

#. type: Bullet: ' -  '
#: concepts.md:183
msgid ""
"Functions that may take a very long time to complete (e.g. display.scroll) "
"often have \"Async\" versions (e.g. `display.scrollAsync`)."
msgstr ""

#. type: Plain text
#: concepts.md:185
#, no-wrap
msgid ""
"    These functions have the exact same behaviour as their counterparts, but "
"don't wait for the effect to finish before allowing the user's program to "
"continue.\n"
msgstr ""

#. type: Plain text
#: concepts.md:187
#, no-wrap
msgid ""
"    Instead, as soon as the function is called, the user's program carries "
"on executing (and can go an do something else while the task is running in "
"the background).\n"
msgstr ""

#. type: Plain text
#: concepts.md:192
#, no-wrap
msgid ""
" - Users can also make use of the runtime fiber scheduler. This lets you run "
"parts of your program in the background, and share the processor on your "
"micro:bit between those parts\n"
"as they need it.\n"
msgstr ""

#. type: Plain text
#: concepts.md:194
#, no-wrap
msgid ""
"    In fact, whenever you write an event handler, the runtime will normally "
"execute your handler in the background in this way, so that it reduces the "
"impact on the rest of your program!\n"
msgstr ""

#. type: Plain text
#: concepts.md:197
#, no-wrap
msgid ""
"    The scheduler is a type of *non-preemptive scheduler*. This means that "
"the runtime will never take control away from your program - it will wait "
"for it to make a call to a runtime\n"
"function that is *blocking*.\n"
msgstr ""

#. type: Plain text
#: concepts.md:198
#, no-wrap
msgid ""
"    All the functions that are blocking are listed as such in their "
"documentation.  You can create **fibers** at any time.\n"
msgstr ""
