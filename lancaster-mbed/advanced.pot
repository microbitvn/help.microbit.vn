#. extracted from advanced.md
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-31 11:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.10.0\n"

#: advanced.md:1
msgid "# Advanced Features of the Runtime"
msgstr ""

#: advanced.md:3
msgid ""
"Under the surface, the micro:bit runtime is a highly configurable, modular "
"and component based piece of software."
msgstr ""

#: advanced.md:5
msgid ""
"The `uBit` object is provided as a collection of the commonly used "
"components, all gathered together in one place\n"
"to make it easier for novice users to access the functionality of the "
"device. However, there is no obligation to\n"
"use the `uBit` abstraction. More advanced users may prefer to create and use "
"only the parts of the runtime they\n"
"need."
msgstr ""

#: advanced.md:10
msgid ""
"This provides more control and often frees up more memory resource for the "
"application program - but does so\n"
"at the expense of the user taking more responsibility and additional "
"complexity in their programs."
msgstr ""

#: advanced.md:13
msgid "## Using Components Directly"
msgstr ""

#: advanced.md:15
msgid ""
"Taking advantage of the modular structure of the micro:bit runtime is fairly "
"straightforward."
msgstr ""

#: advanced.md:17
msgid ""
" - Firstly, create a program that does **not** create or initialise a uBit "
"object.\n"
" - Include `MicroBit.h` (or if you prefer, just the header files of the "
"components you want to use). Including `MicroBit.h` is however, simpler.\n"
" - Instead, create C++ object instances of the classes that you want to use "
"**as global variables** in your program. Create as many components as you "
"need. You are free to use any of the constructors in this documentation.\n"
" - Call functions on those instances to elicit the behaviour you need, using "
"the name of your object instances instead of `uBit.*`"
msgstr ""

#: advanced.md:22
msgid ""
"For example, if you wanted to create a program that just used the LED matrix "
"display driver, you might write a program like this:"
msgstr ""

#: advanced.md:24
msgctxt "advanced.md:24"
msgid ""
"```cpp\n"
"#include \"MicroBit.h\""
msgstr ""

#: advanced.md:27
msgid "MicroBitDisplay display;"
msgstr ""

#: advanced.md:29
msgid ""
"int main()\n"
"{\n"
"    while(1)\n"
"        display.scroll(\":)\");\n"
"}\n"
"```"
msgstr ""

#: advanced.md:36
msgid "If you need other components, add them to your program in the same way."
msgstr ""

#: advanced.md:38
msgid ""
"If a component has a dependency on another component (e.g. in the example "
"below, the accelerometer is dependent on an I2C bus), then this will be "
"requested as a mandatory parameter in the constructor."
msgstr ""

#: advanced.md:40
msgid ""
"See the 'Constructor' section of the each components' API documentation for "
"details and examples.\n"
"```cpp\n"
"#include \"MicroBit.h\""
msgstr ""

#: advanced.md:44
msgid ""
"MicroBitI2C i2c = MicroBitI2C(I2C_SDA0, I2C_SCL0);\n"
"MicroBitAccelerometer accelerometer = MicroBitAccelerometer(i2c);\n"
"MicroBitDisplay display;"
msgstr ""

#: advanced.md:48
msgid ""
"int main()\n"
"{\n"
"    while(1)\n"
"        display.scroll(accelerometer.getX());\n"
"}\n"
"```"
msgstr ""

#: advanced.md:55
msgid ""
"!!! warning\n"
"    micro:bit runtime components should **always** be brought up as global "
"variables. They should **not** be created as local variables - either in "
"your main method or anywhere else. The reason for this is the the runtime is "
"a multi-threaded environment, and any variables created in stack memory "
"(like local variables) may be paged out by the scheduler, and result in "
"instability if they utilise interrupts or are accessed by other threads. "
"So... don't do it!"
msgstr ""

#: advanced.md:59
msgid "## System Components"
msgstr ""

#: advanced.md:61
msgid ""
"There are also system components that provide background services. Without "
"the `uBit` object, these will not be created by default.  Examples include "
"the fiber scheduler, message bus and heap allocator."
msgstr ""

#: advanced.md:63
msgid ""
"You are not required to initialise these components, but you should do so if "
"you want to benefit from the functionality they provide. The following "
"section describe how to do this."
msgstr ""

#: advanced.md:65
msgid "## Initialising the Message Bus"
msgstr ""

#: advanced.md:67
msgid ""
"The [`MicroBitMessageBus`](ubit/messageBus.md) allows events to be created "
"and delivered to applications.  So if a "
"[`MicroBitMessageBus`](ubit/messageBus.md) is not created, then all events "
"in the micro:bit runtime will be quietly ignored."
msgstr ""

#: advanced.md:69
msgid ""
"To enable this functionality, simply create an instance of the "
"[`MicroBitMessageBus`](ubit/messageBus.md) class. From that point onward in "
"your program, you can raise and listen for events as described in the "
"[`MicroBitMessageBus`](ubit/messageBus.md) documentation."
msgstr ""

#: advanced.md:71
msgctxt "advanced.md:71"
msgid ""
"```cpp\n"
"#include \"MicroBit.h\""
msgstr ""

#: advanced.md:74
msgctxt "advanced.md:74"
msgid ""
"MicroBitMessageBus bus;\n"
"MicroBitButton buttonA(MICROBIT_PIN_BUTTON_A, MICROBIT_ID_BUTTON_A);\n"
"MicroBitDisplay display;"
msgstr ""

#: advanced.md:78
msgctxt "advanced.md:78"
msgid ""
"void onPressed(MicroBitEvent e)\n"
"{\n"
"    display.print(\"S\");    \n"
"}"
msgstr ""

#: advanced.md:83
msgid ""
"int main()\n"
"{\n"
"    bus.listen(MICROBIT_ID_BUTTON_A, MICROBIT_BUTTON_EVT_CLICK, onPressed);"
msgstr ""

#: advanced.md:87
msgid ""
"    while(1)\n"
"    {\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: advanced.md:93
msgid ""
"!!! warning\n"
"    Running a MessageBus without the Fiber Scheduler will result in all "
"event handlers being registered as MESSAGE_BUS_LISTENER_IMMEDIATE (see "
"[`MicroBitMessageBus`](ubit/messageBus.md) for details). This means that "
"your event handler will be executed in the context of the code that raised "
"the event. This may include interrupt context, which may not be safe for all "
"operations. It is recommend that you always run the MessageBus with the "
"Fiber Scheduler in order to allow the event to be decoupled from interrupt "
"context."
msgstr ""

#: advanced.md:96
msgid "## Initialising the Fiber Scheduler"
msgstr ""

#: advanced.md:98
msgid ""
"Often when using asynchronous events, it is also useful to run the fiber "
"scheduler. Without a scheduler in operation, all event handlers (such as the "
"one above) will be executed with the threading mode "
"`MESSAGE_BUS_LISTENER_IMMEDIATE`, as\n"
"described on the [`MicroBitMessageBus`](ubit/messageBus.md) documentation."
msgstr ""

#: advanced.md:101
msgid ""
"Also, it is not really possible to transparently enter a power efficient "
"sleep - as illustrated in the busy loop in the above example."
msgstr ""

#: advanced.md:103
msgid ""
"Initialising the fiber scheduler is simple, and is demonstrated in the "
"following example."
msgstr ""

#: advanced.md:105
msgid ""
"From the moment the fiber scheduler is initialised, it is then possible to "
"block the processor in a power efficient way and to operate threaded event "
"handlers:"
msgstr ""

#: advanced.md:107
msgid ""
"```c++\n"
"#include \"MicroBit.h\""
msgstr ""

#: advanced.md:110
msgctxt "advanced.md:110"
msgid ""
"MicroBitMessageBus bus;\n"
"MicroBitButton buttonA(MICROBIT_PIN_BUTTON_A, MICROBIT_ID_BUTTON_A);\n"
"MicroBitDisplay display;"
msgstr ""

#: advanced.md:114
msgctxt "advanced.md:114"
msgid ""
"void onPressed(MicroBitEvent e)\n"
"{\n"
"    display.print(\"S\");    \n"
"}"
msgstr ""

#: advanced.md:119
msgid ""
"int main()\n"
"{\n"
"    scheduler_init(bus);"
msgstr ""

#: advanced.md:123
msgid ""
"    bus.listen(MICROBIT_ID_BUTTON_A, MICROBIT_BUTTON_EVT_CLICK, onPressed);"
msgstr ""

#: advanced.md:125
msgid ""
"    while(1)\n"
"        fiber_sleep(1000);\n"
"}\n"
"```"
msgstr ""

#: advanced.md:130
msgid ""
"!!!note\n"
"    Function calls to `uBit.sleep()` must be replaced with the direct, "
"equivalent calls to the scheduler using `fiber_sleep()`."
msgstr ""

#: advanced.md:133
msgid "## Initialising the Heap Allocator"
msgstr ""

#: advanced.md:135
msgid ""
"The micro:bit runtime provides an optional, heap memory allocator. This is "
"primarily to permit the use of **multiple** regions of memory to be used as "
"heap memory space for your variables."
msgstr ""

#: advanced.md:137
msgid ""
"The `uBit` initialisation function will automatically release any memory "
"unused by the Bluetooth stack for general purpose use in this fashion (this "
"typically provides an additional 1K of SRAM under Bluetooth enabled builds, "
"and another 8K if Bluetooth is disabled)."
msgstr ""

#: advanced.md:139
msgid ""
"Should you wish to also reclaim memory in this way, you can do so as "
"follows:\n"
"```c++\n"
"#include \"MicroBit.h\""
msgstr ""

#: advanced.md:143
msgid ""
"int main()\n"
"{\n"
"    microbit_create_heap(MICROBIT_SD_GATT_TABLE_START + "
"MICROBIT_SD_GATT_TABLE_SIZE, MICROBIT_SD_LIMIT);\n"
"}\n"
"```"
msgstr ""

#: advanced.md:149
msgid "## Compile Time Configuration Options"
msgstr ""

#: advanced.md:151
msgid ""
"In addition to the flexibility to initialise only the components that you "
"need, the runtime also provides a central, compile time configuration file "
"called `MicroBitConfig.h`."
msgstr ""

#: advanced.md:153
msgid "You can use this to reconfigure the default behaviour of the runtime."
msgstr ""

#: advanced.md:155
msgid ""
"The default settings will provide a stable working environment, but advanced "
"users may want to further tailor the behaviour."
msgstr ""

#: advanced.md:157
msgid ""
"To tailor the behaviour, simply edit the `MicroBitConfig.h` file to change "
"the settings, and then perform a clean rebuild."
msgstr ""

#: advanced.md:159
msgid "### Compile Time Options with MicroBitConfig.h"
msgstr ""

#: advanced.md:161
msgid ""
"The following options are configurable at compile time through "
"`MicroBitConfig.h`:"
msgstr ""

#: advanced.md:163
msgid ""
"| Configuration option | Brief Description |\n"
"| ------------- |-------------|\n"
"| `MICROBIT_HEAP_ALLOCATOR` | Enables or disables the MicroBitHeapAllocator "
"for `uBit` based builds. |\n"
"| `MICROBIT_HEAP_BLOCK_SIZE` | The Block size used by the heap allocator in "
"bytes. |\n"
"| `MICROBIT_NESTED_HEAP_SIZE` | The proportion of SRAM available on the mbed "
"heap to reserve for the micro:bit heap. |\n"
"| `MICROBIT_HEAP_REUSE_SD` | If set to '1', any unused areas of the Soft "
"Device GATT table will be automatically reused as heap memory. |\n"
"| `MICROBIT_SD_GATT_TABLE_SIZE` | The amount of memory (bytes) to dedicate "
"to the SoftDevice GATT table. |\n"
"| `SYSTEM_TICK_PERIOD_MS` | The default scheduling quantum |\n"
"| `EVENT_LISTENER_DEFAUT_FLAGS` | The default threading mode used when a "
"`MicroBitMessageBus` listener is created. |\n"
"| `MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH` | Maximum event queue depth. If a "
"queue exceeds this depth, further events will be dropped. |\n"
"| `MICROBIT_SYSTEM_COMPONENTS` | The maximum size of the interrupt callback "
"list. |\n"
"| `MICROBIT_IDLE_COMPONENTS` | The maximum size of the idle callback list. |\n"
"| `MICROBIT_BLE_ENABLED` | Enable/Disable Bluetooth during normal operation. "
"If disabled, no Bluetooth communication is possible, but radio "
"functionality is made possible, and an additional 8K of SRAM is released|\n"
"| `MICROBIT_BLE_PAIRING_MODE` | Enable/Disable Bluetooth pairing mode with "
"A+B / reset at power up|\n"
"| `MICROBIT_BLE_PRIVATE_ADDRESSES` | Enable/Disable the use of private "
"resolvable addresses. **This is known to be a feature that suffers "
"compatibility issues with many Bluetooth central devices.** |\n"
"| `MICROBIT_BLE_OPEN` | Enable/Disable Bluetooth security entirely. Open "
"Bluetooth links are not secure, but are highly useful during the development "
"of Bluetooth services|\n"
"| `MICROBIT_BLE_SECURITY_LEVEL` | Define the default, global Bluetooth "
"security requirements for MicroBit Bluetooth services|\n"
"| `MICROBIT_BLE_WHITELIST` | Enable/Disable the use of Bluetooth "
"whitelisting.|\n"
"| `MICROBIT_BLE_ADVERTISING_TIMEOUT` | Define the period of time for which "
"the Bluetooth stack will advertise (seconds).|\n"
"| `MICROBIT_BLE_DEFAULT_TX_POWER` | Defines default power level of the "
"Bluetooth radio transmitter.|\n"
"| `MICROBIT_BLE_DFU_SERVICE` | Enable/Disable Bluetooth Service: "
"MicroBitDFU. This allows over the air programming during normal operation.|\n"
"| `MICROBIT_BLE_EVENT_SERVICE` | Enable/Disable Bluetooth Service: "
"MicroBitEventService. This allows routing of events from the micro:bit "
"message bus over Bluetooth.|\n"
"| `MICROBIT_BLE_DEVICE_INFORMATION_SERVICE` | Enable/Disable Bluetooth "
"Service: MicroBitDeviceInformationService. This enables the standard "
"Bluetooth device information service.|\n"
"| `MICROBIT_BLE_EDDYSTONE_URL` | Enable/Disable Eddystone URL support. "
"Enabling this enables you to broadcast a physical web url from the microbit "
"|\n"
"| `USE_ACCEL_LSB` | Enable 10 bit sampling on the accelerometer. By default, "
"a more efficient 8 bit sampling if used.|\n"
"| `MICROBIT_DISPLAY_TYPE` | Selects the default matrix configuration for the "
"display driver.|\n"
"| `MICROBIT_DISPLAY_MINIMUM_BRIGHTNESS` | Selects the minimum permissible "
"brightness level for the device.|\n"
"| `MICROBIT_DISPLAY_MAXIMUM_BRIGHTNESS` | Selects the maximum permissible "
"brightness level for the device.|\n"
"| `MICROBIT_DISPLAY_DEFAULT_BRIGHTNESS` | Selects the default brightness "
"level for the device.|\n"
"| `MICROBIT_DEFAULT_SCROLL_SPEED` | Selects the time taken to scroll a "
"single pixel, in milliseconds.|\n"
"| `MICROBIT_DEFAULT_SCROLL_STRIDE` | Selects the number of pixels a scroll "
"will move in each quantum.|\n"
"| `MICROBIT_DEFAULT_PRINT_SPEED` | Selects the time each character will be "
"shown on the display during print operations, in milliseconds.|\n"
"| `MICROBIT_DEFAULT_SERIAL_MODE` | Configures the default serial mode used "
"by serial read and send calls.|\n"
"| `MICROBIT_DEFAULT_PULLMODE` | Define the default mode in which the digital "
"input pins are configured. Valid options are PullDown, PullUp and "
"PullNone.|\n"
"| `MICROBIT_PANIC_HEAP_FULL` | Enable this to invoke a panic on out of "
"memory conditions.|\n"
"| `MICROBIT_DBG` | Enable this to route debug messages through the USB "
"serial interface.|\n"
"| `MICROBIT_HEAP_DBG` | Enable this to receive detailed diagnostic messages "
"from the heap allocator via the USB serial interface.|\n"
"| `MICROBIT_DAL_VERSION` | Define the default version information of the "
"runtime.|"
msgstr ""

#: advanced.md:202
msgid ""
"There are also some constants that define the geometry of the micro:bit "
"memory"
msgstr ""

#: advanced.md:204
msgid ""
"!!! warning\n"
"    Only change these if you really know what you are doing!"
msgstr ""

#: advanced.md:207
msgid ""
"| Configuration option | Brief Description |\n"
"| ------------- |-------------|\n"
"| `MICROBIT_SRAM_BASE` |  The start address of usable RAM memory. |\n"
"| `MICROBIT_SRAM_END` |  The end address of usable RAM memory. |\n"
"| `MICROBIT_SD_LIMIT` |  The end address of RAM memory reserved for Soft "
"Device (Nordic's Bluetooth stack). |\n"
"| `MICROBIT_SD_GATT_TABLE_START` |  The start address of the Bluetooth GATT "
"table in RAM. |\n"
"| `CORTEX_M0_STACK_BASE` | The memory address of the top of the system "
"stack. |\n"
"| `MICROBIT_STACK_SIZE` | Amount of memory reserved for the stack (in "
"bytes). |\n"
"| `MICROBIT_HEAP_END` | The end address of the mbed heap space |"
msgstr ""

#: advanced.md:217
msgid "### Compile Time Options with Yotta"
msgstr ""

#: advanced.md:219
msgid ""
"Rather than edit the `MicroBitConfig.h` file to change the default behaviour "
"of the runtime, if you are using\n"
"`yotta`, you can also provide a `config.json` in your project."
msgstr ""

#: advanced.md:222
msgid ""
"Here's a `config.json`, using all available configuration options, that "
"matches the default values specified in `MicroBitConfig.h`:"
msgstr ""

#: advanced.md:224
msgid ""
"```json\n"
"{\n"
"    \"microbit-dal\":{\n"
"        \"bluetooth\":{\n"
"            \"enabled\": 1,\n"
"            \"pairing_mode\": 1,\n"
"            \"private_addressing\": 0,\n"
"            \"open\": 0,\n"
"            \"whitelist\": 1,\n"
"            \"advertising_timeout\": 0,\n"
"            \"tx_power\": 0,\n"
"            \"dfu_service\": 1,\n"
"            \"event_service\": 1,\n"
"            \"device_info_service\": 1,\n"
"            \"eddystone_url\": 0\n"
"        },\n"
"        \"reuse_sd\": 1,\n"
"        \"default_pullmode\":\"PullDown\",\n"
"        \"gatt_table_size\": \"0x300\",\n"
"        \"heap_allocator\": 1,\n"
"        \"nested_heap_proportion\": 0.75,\n"
"        \"system_tick_period\": 6,\n"
"        \"system_components\": 10,\n"
"        \"idle_components\": 6,\n"
"        \"use_accel_lsb\": 0,\n"
"        \"min_display_brightness\": 1,\n"
"        \"max_display_brightness\": 255,\n"
"        \"display_scroll_speed\": 120,\n"
"        \"display_scroll_stride\": -1,\n"
"        \"display_print_speed\": 400,\n"
"        \"panic_on_heap_full\": 1,\n"
"        \"debug\": 0,\n"
"        \"heap_debug\": 0,\n"
"        \"stack_size\":2048,\n"
"        \"sram_base\":\"0x20000008\",\n"
"        \"sram_end\":\"0x20004000\",\n"
"        \"sd_limit\":\"0x20002000\",\n"
"        \"gatt_table_start\":\"0x20001900\"\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: advanced.md:266
msgid ""
"It should be noted that **all** of the above options are optional, and will "
"revert to their default values\n"
"if not specified. This means that we can also provide a subset of these "
"options, to configure specific\n"
"parts of the runtime:"
msgstr ""

#: advanced.md:270
msgid ""
"```json\n"
"{\n"
"    \"microbit-dal\":{\n"
"        \"bluetooth\":{\n"
"            \"open\": 1\n"
"        },\n"
"        \"debug\":1\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: advanced.md:281
msgid ""
"Additionally, the options provided through `config.json` intuitively map "
"onto the `#defines`\n"
"listed in `MicroBitConfig.h`"
msgstr ""

#: advanced.md:284
msgid ""
"An example of `config.json` in operation is available at the [microbit-"
"samples](https://github.com/lancaster-university/microbit-samples) GitHub "
"repository."
msgstr ""
