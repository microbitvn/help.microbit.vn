# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-10-25 14:56+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: advanced.md:2
msgid "# Advanced Features of the Runtime"
msgstr ""

#. type: Plain text
#: advanced.md:4
msgid ""
"Under the surface, the micro:bit runtime is a highly configurable, modular "
"and component based piece of software."
msgstr ""

#. type: Plain text
#: advanced.md:9
msgid ""
"The `uBit` object is provided as a collection of the commonly used "
"components, all gathered together in one place to make it easier for novice "
"users to access the functionality of the device. However, there is no "
"obligation to use the `uBit` abstraction. More advanced users may prefer to "
"create and use only the parts of the runtime they need."
msgstr ""

#. type: Plain text
#: advanced.md:12
msgid ""
"This provides more control and often frees up more memory resource for the "
"application program - but does so at the expense of the user taking more "
"responsibility and additional complexity in their programs."
msgstr ""

#. type: Plain text
#: advanced.md:14
msgid "## Using Components Directly"
msgstr ""

#. type: Plain text
#: advanced.md:16
msgid ""
"Taking advantage of the modular structure of the micro:bit runtime is fairly "
"straightforward."
msgstr ""

#. type: Bullet: ' - '
#: advanced.md:21
msgid ""
"Firstly, create a program that does **not** create or initialise a uBit "
"object."
msgstr ""

#. type: Bullet: ' - '
#: advanced.md:21
msgid ""
"Include `MicroBit.h` (or if you prefer, just the header files of the "
"components you want to use). Including `MicroBit.h` is however, simpler."
msgstr ""

#. type: Bullet: ' - '
#: advanced.md:21
msgid ""
"Instead, create C++ object instances of the classes that you want to use "
"**as global variables** in your program. Create as many components as you "
"need. You are free to use any of the constructors in this documentation."
msgstr ""

#. type: Bullet: ' - '
#: advanced.md:21
msgid ""
"Call functions on those instances to elicit the behaviour you need, using "
"the name of your object instances instead of `uBit.*`"
msgstr ""

#. type: Plain text
#: advanced.md:23
msgid ""
"For example, if you wanted to create a program that just used the LED matrix "
"display driver, you might write a program like this:"
msgstr ""

#. type: Plain text
#: advanced.md:26 advanced.md:73
msgid "```cpp #include \"MicroBit.h\""
msgstr ""

#. type: Plain text
#: advanced.md:28
msgid "MicroBitDisplay display;"
msgstr ""

#. type: Plain text
#: advanced.md:35
#, no-wrap
msgid ""
"int main()\n"
"{\n"
"    while(1)\n"
"        display.scroll(\":)\");\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: advanced.md:37
msgid "If you need other components, add them to your program in the same way."
msgstr ""

#. type: Plain text
#: advanced.md:39
msgid ""
"If a component has a dependency on another component (e.g. in the example "
"below, the accelerometer is dependent on an I2C bus), then this will be "
"requested as a mandatory parameter in the constructor."
msgstr ""

#. type: Plain text
#: advanced.md:43
msgid ""
"See the 'Constructor' section of the each components' API documentation for "
"details and examples.  ```cpp #include \"MicroBit.h\""
msgstr ""

#. type: Plain text
#: advanced.md:47
msgid ""
"MicroBitI2C i2c = MicroBitI2C(I2C_SDA0, I2C_SCL0); MicroBitAccelerometer "
"accelerometer = MicroBitAccelerometer(i2c); MicroBitDisplay display;"
msgstr ""

#. type: Plain text
#: advanced.md:54
#, no-wrap
msgid ""
"int main()\n"
"{\n"
"    while(1)\n"
"        display.scroll(accelerometer.getX());\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: advanced.md:57
#, no-wrap
msgid ""
"!!! warning\n"
"    micro:bit runtime components should **always** be brought up as global "
"variables. They should **not** be created as local variables - either in "
"your main method or anywhere else. The reason for this is the the runtime is "
"a multi-threaded environment, and any variables created in stack memory "
"(like local variables) may be paged out by the scheduler, and result in "
"instability if they utilise interrupts or are accessed by other "
"threads. So... don't do it!\n"
msgstr ""

#. type: Plain text
#: advanced.md:60
msgid "## System Components"
msgstr ""

#. type: Plain text
#: advanced.md:62
msgid ""
"There are also system components that provide background services. Without "
"the `uBit` object, these will not be created by default.  Examples include "
"the fiber scheduler, message bus and heap allocator."
msgstr ""

#. type: Plain text
#: advanced.md:64
msgid ""
"You are not required to initialise these components, but you should do so if "
"you want to benefit from the functionality they provide. The following "
"section describe how to do this."
msgstr ""

#. type: Plain text
#: advanced.md:66
msgid "## Initialising the Message Bus"
msgstr ""

#. type: Plain text
#: advanced.md:68
msgid ""
"The [`MicroBitMessageBus`](ubit/messageBus.md) allows events to be created "
"and delivered to applications.  So if a "
"[`MicroBitMessageBus`](ubit/messageBus.md) is not created, then all events "
"in the micro:bit runtime will be quietly ignored."
msgstr ""

#. type: Plain text
#: advanced.md:70
msgid ""
"To enable this functionality, simply create an instance of the "
"[`MicroBitMessageBus`](ubit/messageBus.md) class. From that point onward in "
"your program, you can raise and listen for events as described in the "
"[`MicroBitMessageBus`](ubit/messageBus.md) documentation."
msgstr ""

#. type: Plain text
#: advanced.md:77 advanced.md:113
msgid ""
"MicroBitMessageBus bus; MicroBitButton buttonA(MICROBIT_PIN_BUTTON_A, "
"MICROBIT_ID_BUTTON_A); MicroBitDisplay display;"
msgstr ""

#. type: Plain text
#: advanced.md:82 advanced.md:118
#, no-wrap
msgid ""
"void onPressed(MicroBitEvent e)\n"
"{\n"
"    display.print(\"S\");    \n"
"}\n"
msgstr ""

#. type: Plain text
#: advanced.md:86
#, no-wrap
msgid ""
"int main()\n"
"{\n"
"    bus.listen(MICROBIT_ID_BUTTON_A, MICROBIT_BUTTON_EVT_CLICK, "
"onPressed);\n"
msgstr ""

#. type: Plain text
#: advanced.md:92
#, no-wrap
msgid ""
"    while(1)\n"
"    {\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: advanced.md:95
#, no-wrap
msgid ""
"!!! warning\n"
"    Running a MessageBus without the Fiber Scheduler will result in all "
"event handlers being registered as MESSAGE_BUS_LISTENER_IMMEDIATE (see "
"[`MicroBitMessageBus`](ubit/messageBus.md) for details). This means that "
"your event handler will be executed in the context of the code that raised "
"the event. This may include interrupt context, which may not be safe for all "
"operations. It is recommend that you always run the MessageBus with the "
"Fiber Scheduler in order to allow the event to be decoupled from interrupt "
"context.\n"
msgstr ""

#. type: Plain text
#: advanced.md:97
msgid "## Initialising the Fiber Scheduler"
msgstr ""

#. type: Plain text
#: advanced.md:100
msgid ""
"Often when using asynchronous events, it is also useful to run the fiber "
"scheduler. Without a scheduler in operation, all event handlers (such as the "
"one above) will be executed with the threading mode "
"`MESSAGE_BUS_LISTENER_IMMEDIATE`, as described on the "
"[`MicroBitMessageBus`](ubit/messageBus.md) documentation."
msgstr ""

#. type: Plain text
#: advanced.md:102
msgid ""
"Also, it is not really possible to transparently enter a power efficient "
"sleep - as illustrated in the busy loop in the above example."
msgstr ""

#. type: Plain text
#: advanced.md:104
msgid ""
"Initialising the fiber scheduler is simple, and is demonstrated in the "
"following example."
msgstr ""

#. type: Plain text
#: advanced.md:106
msgid ""
"From the moment the fiber scheduler is initialised, it is then possible to "
"block the processor in a power efficient way and to operate threaded event "
"handlers:"
msgstr ""

#. type: Plain text
#: advanced.md:109
msgid "```c++ #include \"MicroBit.h\""
msgstr ""

#. type: Plain text
#: advanced.md:122
#, no-wrap
msgid ""
"int main()\n"
"{\n"
"    scheduler_init(bus);\n"
msgstr ""

#. type: Plain text
#: advanced.md:124
#, no-wrap
msgid ""
"    bus.listen(MICROBIT_ID_BUTTON_A, MICROBIT_BUTTON_EVT_CLICK, "
"onPressed);\n"
msgstr ""

#. type: Plain text
#: advanced.md:129
#, no-wrap
msgid ""
"    while(1)\n"
"        fiber_sleep(1000);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: advanced.md:132
#, no-wrap
msgid ""
"!!!note\n"
"    Function calls to `uBit.sleep()` must be replaced with the direct, "
"equivalent calls to the scheduler using `fiber_sleep()`.\n"
msgstr ""

#. type: Plain text
#: advanced.md:134
msgid "## Initialising the Heap Allocator"
msgstr ""

#. type: Plain text
#: advanced.md:136
msgid ""
"The micro:bit runtime provides an optional, heap memory allocator. This is "
"primarily to permit the use of **multiple** regions of memory to be used as "
"heap memory space for your variables."
msgstr ""

#. type: Plain text
#: advanced.md:138
msgid ""
"The `uBit` initialisation function will automatically release any memory "
"unused by the Bluetooth stack for general purpose use in this fashion (this "
"typically provides an additional 1K of SRAM under Bluetooth enabled builds, "
"and another 8K if Bluetooth is disabled)."
msgstr ""

#. type: Plain text
#: advanced.md:142
msgid ""
"Should you wish to also reclaim memory in this way, you can do so as "
"follows: ```c++ #include \"MicroBit.h\""
msgstr ""

#. type: Plain text
#: advanced.md:148
#, no-wrap
msgid ""
"int main()\n"
"{\n"
"    microbit_create_heap(MICROBIT_SD_GATT_TABLE_START + "
"MICROBIT_SD_GATT_TABLE_SIZE, MICROBIT_SD_LIMIT);\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: advanced.md:150
msgid "## Compile Time Configuration Options"
msgstr ""

#. type: Plain text
#: advanced.md:152
msgid ""
"In addition to the flexibility to initialise only the components that you "
"need, the runtime also provides a central, compile time configuration file "
"called `MicroBitConfig.h`."
msgstr ""

#. type: Plain text
#: advanced.md:154
msgid "You can use this to reconfigure the default behaviour of the runtime."
msgstr ""

#. type: Plain text
#: advanced.md:156
msgid ""
"The default settings will provide a stable working environment, but advanced "
"users may want to further tailor the behaviour."
msgstr ""

#. type: Plain text
#: advanced.md:158
msgid ""
"To tailor the behaviour, simply edit the `MicroBitConfig.h` file to change "
"the settings, and then perform a clean rebuild."
msgstr ""

#. type: Plain text
#: advanced.md:160
msgid "### Compile Time Options with MicroBitConfig.h"
msgstr ""

#. type: Plain text
#: advanced.md:162
msgid ""
"The following options are configurable at compile time through "
"`MicroBitConfig.h`:"
msgstr ""

#. type: Plain text
#: advanced.md:201
msgid ""
"| Configuration option | Brief Description | | ------------- |-------------| "
"| `MICROBIT_HEAP_ALLOCATOR` | Enables or disables the MicroBitHeapAllocator "
"for `uBit` based builds. | | `MICROBIT_HEAP_BLOCK_SIZE` | The Block size "
"used by the heap allocator in bytes. | | `MICROBIT_NESTED_HEAP_SIZE` | The "
"proportion of SRAM available on the mbed heap to reserve for the micro:bit "
"heap. | | `MICROBIT_HEAP_REUSE_SD` | If set to '1', any unused areas of the "
"Soft Device GATT table will be automatically reused as heap memory. | | "
"`MICROBIT_SD_GATT_TABLE_SIZE` | The amount of memory (bytes) to dedicate to "
"the SoftDevice GATT table. | | `SYSTEM_TICK_PERIOD_MS` | The default "
"scheduling quantum | | `EVENT_LISTENER_DEFAUT_FLAGS` | The default threading "
"mode used when a `MicroBitMessageBus` listener is created. | | "
"`MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH` | Maximum event queue depth. If a "
"queue exceeds this depth, further events will be dropped. | | "
"`MICROBIT_SYSTEM_COMPONENTS` | The maximum size of the interrupt callback "
"list. | | `MICROBIT_IDLE_COMPONENTS` | The maximum size of the idle callback "
"list. | | `MICROBIT_BLE_ENABLED` | Enable/Disable Bluetooth during normal "
"operation. If disabled, no Bluetooth communication is possible, but radio "
"functionality is made possible, and an additional 8K of SRAM is released| | "
"`MICROBIT_BLE_PAIRING_MODE` | Enable/Disable Bluetooth pairing mode with A+B "
"/ reset at power up| | `MICROBIT_BLE_PRIVATE_ADDRESSES` | Enable/Disable the "
"use of private resolvable addresses. **This is known to be a feature that "
"suffers compatibility issues with many Bluetooth central devices.** | | "
"`MICROBIT_BLE_OPEN` | Enable/Disable Bluetooth security entirely. Open "
"Bluetooth links are not secure, but are highly useful during the development "
"of Bluetooth services| | `MICROBIT_BLE_SECURITY_LEVEL` | Define the default, "
"global Bluetooth security requirements for MicroBit Bluetooth services| | "
"`MICROBIT_BLE_WHITELIST` | Enable/Disable the use of Bluetooth "
"whitelisting.| | `MICROBIT_BLE_ADVERTISING_TIMEOUT` | Define the period of "
"time for which the Bluetooth stack will advertise (seconds).| | "
"`MICROBIT_BLE_DEFAULT_TX_POWER` | Defines default power level of the "
"Bluetooth radio transmitter.| | `MICROBIT_BLE_DFU_SERVICE` | Enable/Disable "
"Bluetooth Service: MicroBitDFU. This allows over the air programming during "
"normal operation.| | `MICROBIT_BLE_EVENT_SERVICE` | Enable/Disable Bluetooth "
"Service: MicroBitEventService. This allows routing of events from the "
"micro:bit message bus over Bluetooth.| | "
"`MICROBIT_BLE_DEVICE_INFORMATION_SERVICE` | Enable/Disable Bluetooth "
"Service: MicroBitDeviceInformationService. This enables the standard "
"Bluetooth device information service.| | `MICROBIT_BLE_EDDYSTONE_URL` | "
"Enable/Disable Eddystone URL support. Enabling this enables you to broadcast "
"a physical web url from the microbit | | `USE_ACCEL_LSB` | Enable 10 bit "
"sampling on the accelerometer. By default, a more efficient 8 bit sampling "
"if used.| | `MICROBIT_DISPLAY_TYPE` | Selects the default matrix "
"configuration for the display driver.| | "
"`MICROBIT_DISPLAY_MINIMUM_BRIGHTNESS` | Selects the minimum permissible "
"brightness level for the device.| | `MICROBIT_DISPLAY_MAXIMUM_BRIGHTNESS` | "
"Selects the maximum permissible brightness level for the device.| | "
"`MICROBIT_DISPLAY_DEFAULT_BRIGHTNESS` | Selects the default brightness level "
"for the device.| | `MICROBIT_DEFAULT_SCROLL_SPEED` | Selects the time taken "
"to scroll a single pixel, in milliseconds.| | "
"`MICROBIT_DEFAULT_SCROLL_STRIDE` | Selects the number of pixels a scroll "
"will move in each quantum.| | `MICROBIT_DEFAULT_PRINT_SPEED` | Selects the "
"time each character will be shown on the display during print operations, in "
"milliseconds.| | `MICROBIT_DEFAULT_SERIAL_MODE` | Configures the default "
"serial mode used by serial read and send calls.| | "
"`MICROBIT_DEFAULT_PULLMODE` | Define the default mode in which the digital "
"input pins are configured. Valid options are PullDown, PullUp and PullNone.| "
"| `MICROBIT_PANIC_HEAP_FULL` | Enable this to invoke a panic on out of "
"memory conditions.| | `MICROBIT_DBG` | Enable this to route debug messages "
"through the USB serial interface.| | `MICROBIT_HEAP_DBG` | Enable this to "
"receive detailed diagnostic messages from the heap allocator via the USB "
"serial interface.| | `MICROBIT_DAL_VERSION` | Define the default version "
"information of the runtime.|"
msgstr ""

#. type: Plain text
#: advanced.md:203
msgid ""
"There are also some constants that define the geometry of the micro:bit "
"memory"
msgstr ""

#. type: Plain text
#: advanced.md:206
#, no-wrap
msgid ""
"!!! warning\n"
"    Only change these if you really know what you are doing!\n"
msgstr ""

#. type: Plain text
#: advanced.md:216
msgid ""
"| Configuration option | Brief Description | | ------------- |-------------| "
"| `MICROBIT_SRAM_BASE` | The start address of usable RAM memory. | | "
"`MICROBIT_SRAM_END` | The end address of usable RAM memory. | | "
"`MICROBIT_SD_LIMIT` | The end address of RAM memory reserved for Soft Device "
"(Nordic's Bluetooth stack). | | `MICROBIT_SD_GATT_TABLE_START` | The start "
"address of the Bluetooth GATT table in RAM. | | `CORTEX_M0_STACK_BASE` | The "
"memory address of the top of the system stack. | | `MICROBIT_STACK_SIZE` | "
"Amount of memory reserved for the stack (in bytes). | | `MICROBIT_HEAP_END` "
"| The end address of the mbed heap space |"
msgstr ""

#. type: Plain text
#: advanced.md:218
msgid "### Compile Time Options with Yotta"
msgstr ""

#. type: Plain text
#: advanced.md:221
msgid ""
"Rather than edit the `MicroBitConfig.h` file to change the default behaviour "
"of the runtime, if you are using `yotta`, you can also provide a "
"`config.json` in your project."
msgstr ""

#. type: Plain text
#: advanced.md:223
msgid ""
"Here's a `config.json`, using all available configuration options, that "
"matches the default values specified in `MicroBitConfig.h`:"
msgstr ""

#. type: Plain text
#: advanced.md:265
#, no-wrap
msgid ""
"```json\n"
"{\n"
"    \"microbit-dal\":{\n"
"        \"bluetooth\":{\n"
"            \"enabled\": 1,\n"
"            \"pairing_mode\": 1,\n"
"            \"private_addressing\": 0,\n"
"            \"open\": 0,\n"
"            \"whitelist\": 1,\n"
"            \"advertising_timeout\": 0,\n"
"            \"tx_power\": 0,\n"
"            \"dfu_service\": 1,\n"
"            \"event_service\": 1,\n"
"            \"device_info_service\": 1,\n"
"            \"eddystone_url\": 0\n"
"        },\n"
"        \"reuse_sd\": 1,\n"
"        \"default_pullmode\":\"PullDown\",\n"
"        \"gatt_table_size\": \"0x300\",\n"
"        \"heap_allocator\": 1,\n"
"        \"nested_heap_proportion\": 0.75,\n"
"        \"system_tick_period\": 6,\n"
"        \"system_components\": 10,\n"
"        \"idle_components\": 6,\n"
"        \"use_accel_lsb\": 0,\n"
"        \"min_display_brightness\": 1,\n"
"        \"max_display_brightness\": 255,\n"
"        \"display_scroll_speed\": 120,\n"
"        \"display_scroll_stride\": -1,\n"
"        \"display_print_speed\": 400,\n"
"        \"panic_on_heap_full\": 1,\n"
"        \"debug\": 0,\n"
"        \"heap_debug\": 0,\n"
"        \"stack_size\":2048,\n"
"        \"sram_base\":\"0x20000008\",\n"
"        \"sram_end\":\"0x20004000\",\n"
"        \"sd_limit\":\"0x20002000\",\n"
"        \"gatt_table_start\":\"0x20001900\"\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: advanced.md:269
msgid ""
"It should be noted that **all** of the above options are optional, and will "
"revert to their default values if not specified. This means that we can also "
"provide a subset of these options, to configure specific parts of the "
"runtime:"
msgstr ""

#. type: Plain text
#: advanced.md:280
#, no-wrap
msgid ""
"```json\n"
"{\n"
"    \"microbit-dal\":{\n"
"        \"bluetooth\":{\n"
"            \"open\": 1\n"
"        },\n"
"        \"debug\":1\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: advanced.md:283
msgid ""
"Additionally, the options provided through `config.json` intuitively map "
"onto the `#defines` listed in `MicroBitConfig.h`"
msgstr ""

#. type: Plain text
#: advanced.md:284
msgid ""
"An example of `config.json` in operation is available at the "
"[microbit-samples](https://github.com/lancaster-university/microbit-samples) "
"GitHub repository."
msgstr ""
