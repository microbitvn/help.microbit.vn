#. extracted from helloworld.md
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-24 10:45+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.10.0\n"

#: helloworld.md:1
msgid "# Hello, World!"
msgstr ""

#: helloworld.md:4
msgid ""
"The traditional way to start programming in a new language is to get your\n"
"computer to say, \"Hello, World!\"."
msgstr ""

#: helloworld.md:7
msgid "![](images/scroll-hello1.gif)"
msgstr ""

#: helloworld.md:9
msgid "This is easy with MicroPython::"
msgstr ""

#: helloworld.md:11
msgid ""
"```python\n"
"from microbit import *\n"
"display.scroll(\"Hello, World!\")\n"
"```"
msgstr ""

#: helloworld.md:16
msgid "Each line does something special. The first line::"
msgstr ""

#: helloworld.md:18
msgid ""
"```python\n"
"from microbit import *\n"
"```"
msgstr ""

#: helloworld.md:22
msgid ""
"...tells MicroPython to get all the stuff it needs to work with the BBC\n"
"micro:bit. All this stuff is in a module called `microbit` (a module\n"
"is a library of pre-existing code). When you `import` something you're "
"telling\n"
"MicroPython that you want to use it, and `*` is Python's way to say\n"
"*everything*. So, `from microbit import *` means, in English, \"I want to be\n"
"able to use everything from the microbit code library\"."
msgstr ""

#: helloworld.md:29
msgid "The second line::"
msgstr ""

#: helloworld.md:31
msgid ""
"```python\n"
"display.scroll(\"Hello, World!\")\n"
"```"
msgstr ""

#: helloworld.md:35
msgid ""
"...tells MicroPython to use the display to scroll the string of characters\n"
"\"Hello, World!\". The `display` part of that line is an *object* from the\n"
"`microbit` module that represents the device's physical display (we say\n"
"\"object\" instead of \"thingy\", \"whatsit\" or \"doodah\"). We can tell the "
"display\n"
"to do things with a full-stop `.` followed by what looks like a command (in\n"
"fact it's something we call a *method*). In this case we're using the\n"
"`scroll` method. Since `scroll` needs to know what characters to scroll\n"
"across the physical display we specify them between double quotes (`\"`)\n"
"within parenthesis (`(` and `)`). These are called the *arguments*. So,\n"
"`display.scroll(\"Hello, World!\")` means, in English, \"I want you to use the\n"
"display to scroll the text 'Hello, World!'\". If a method doesn't need any\n"
"arguments we make this clear by using empty parenthesis like this: `()`."
msgstr ""

#: helloworld.md:48
msgid ""
"Copy the \"Hello, World!\" code into your editor and flash it onto the device.\n"
"Can you work out how to change the message? Can you make it say hello to "
"you?\n"
"For example, I might make it say \"Hello, Nicholas!\". Here's a clue, you need "
"to\n"
"change the scroll method's argument."
msgstr ""

#: helloworld.md:53
msgid "!!! warning "
msgstr ""

#: helloworld.md:55
msgid "    It may not work. :-)"
msgstr ""

#: helloworld.md:57
msgid ""
"    This is where things get fun and MicroPython tries to be helpful. If\n"
"    it encounters an error it will scroll a helpful message on the "
"micro:bit's\n"
"    display. If it can, it will tell you the line number for where the error\n"
"    can be found."
msgstr ""

#: helloworld.md:62
msgid ""
"    Python expects you to type **EXACTLY** the right thing. So, for "
"instance,\n"
"    ``Microbit``, ``microbit`` and ``microBit`` are all different things to\n"
"    Python. If MicroPython complains about a ``NameError`` it's probably\n"
"    because you've typed something inaccurately. It's like the difference\n"
"    between referring to \"Nicholas\" and \"Nicolas\". They're two different "
"people\n"
"    but their names look very similar."
msgstr ""

#: helloworld.md:69
msgid ""
"    If MicroPython complains about a ``SyntaxError`` you've simply typed "
"code\n"
"    in a way that MicroPython can't understand. Check you're not missing any\n"
"    special characters like ``\"`` or ``:``. It's like putting. a full stop "
"in\n"
"    the middle of a sentence. It's hard to understand exactly what you mean."
msgstr ""

#: helloworld.md:74
msgid ""
"    Your microbit may stop responding: you cannot flash new code to it or\n"
"    enter commands into the REPL. If this happens, try power cycling it. "
"That\n"
"    is, unplug the USB cable (and battery cable if it's connected), then "
"plug\n"
"    the cable back in again. You may also need to quit and re-start your "
"code\n"
"    editor application."
msgstr ""
