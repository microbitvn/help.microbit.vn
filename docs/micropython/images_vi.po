#. extracted from images.md
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-11-24 10:45+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.10.0\n"

#: images.md:1
msgid "# Hình ảnh"
msgstr ""

#: images.md:3
msgid ""
"MicroPython is about as good at art as you can be if the only thing you have "
"is\n"
"a 5x5 grid of red LEDs (light emitting diodes - the things that light up on "
"the\n"
"front of the device). MicroPython gives you quite a lot of control over the\n"
"display so you can create all sorts of interesting effects."
msgstr ""

#: images.md:8
msgid ""
"MicroPython comes with lots of built-in pictures to show on the display.\n"
"For example, to make the device appear happy you type::"
msgstr ""

#: images.md:11
msgid ""
"```python\n"
"from microbit import *\n"
"display.show(Image.HAPPY)\n"
"```"
msgstr ""

#: images.md:16
msgid ""
"I suspect you can remember what the first line does. The second line uses "
"the\n"
"`display` object to `show` a built-in image. The happy image we want to\n"
"display is a part of the `Image` object and called `HAPPY`. We tell\n"
"`show` to use it by putting it between the parenthesis (`(` and `)`)."
msgstr ""

#: images.md:21
msgid "![](images/happy.png)"
msgstr ""

#: images.md:23
msgid "Here's a list of the built-in images:"
msgstr ""

#: images.md:25
msgid ""
"* `Image.HEART`\n"
"* `Image.HEART_SMALL`\n"
"* `Image.HAPPY`\n"
"* `Image.SMILE`\n"
"* `Image.SAD`\n"
"* `Image.CONFUSED`\n"
"* `Image.ANGRY`\n"
"* `Image.ASLEEP`\n"
"* `Image.SURPRISED`\n"
"* `Image.SILLY`\n"
"* `Image.FABULOUS`\n"
"* `Image.MEH`\n"
"* `Image.YES`\n"
"* `Image.NO`\n"
"* `Image.CLOCK12`, `Image.CLOCK11`, `Image.CLOCK10`, `Image.CLOCK9`,\n"
"  `Image.CLOCK8`, `Image.CLOCK7`, `Image.CLOCK6`, `Image.CLOCK5`,\n"
"  `Image.CLOCK4`, `Image.CLOCK3`, `Image.CLOCK2`, `Image.CLOCK1`\n"
"* `Image.ARROW_N`, `Image.ARROW_NE`, `Image.ARROW_E`,\n"
"  `Image.ARROW_SE`, `Image.ARROW_S`, `Image.ARROW_SW`,\n"
"  `Image.ARROW_W`, `Image.ARROW_NW`\n"
"* `Image.TRIANGLE`\n"
"* `Image.TRIANGLE_LEFT`\n"
"* `Image.CHESSBOARD`\n"
"* `Image.DIAMOND`\n"
"* `Image.DIAMOND_SMALL`\n"
"* `Image.SQUARE`\n"
"* `Image.SQUARE_SMALL`\n"
"* `Image.RABBIT`\n"
"* `Image.COW`\n"
"* `Image.MUSIC_CROTCHET`\n"
"* `Image.MUSIC_QUAVER`\n"
"* `Image.MUSIC_QUAVERS`\n"
"* `Image.PITCHFORK`\n"
"* `Image.XMAS`\n"
"* `Image.PACMAN`\n"
"* `Image.TARGET`\n"
"* `Image.TSHIRT`\n"
"* `Image.ROLLERSKATE`\n"
"* `Image.DUCK`\n"
"* `Image.HOUSE`\n"
"* `Image.TORTOISE`\n"
"* `Image.BUTTERFLY`\n"
"* `Image.STICKFIGURE`\n"
"* `Image.GHOST`\n"
"* `Image.SWORD`\n"
"* `Image.GIRAFFE`\n"
"* `Image.SKULL`\n"
"* `Image.UMBRELLA`\n"
"* `Image.SNAKE`"
msgstr ""

#: images.md:75
msgid ""
"There's quite a lot! Why not modify the code that makes the micro:bit look\n"
"happy to see what some of the other built-in images look like? (Just replace\n"
"`Image.HAPPY` with one of the built-in images listed above.)"
msgstr ""

#: images.md:79
msgid "## DIY Images"
msgstr ""

#: images.md:81
msgid ""
"Of course, you want to make your own image to display on the micro:bit, "
"right?"
msgstr ""

#: images.md:83
msgid "That's easy."
msgstr ""

#: images.md:85
msgid ""
"Each LED pixel on the physical display can be set to one of ten values. If a\n"
"pixel is set to `0` (zero) then it's off. It literally has zero brightness.\n"
"However, if it is set to `9` then it is at its brightest level. The values\n"
"`1` to `8` represent the brightness levels between off (`0`) and full on\n"
"(`9`)."
msgstr ""

#: images.md:91
msgid ""
"Armed with this information, it's possible to create a new image like this::\n"
"```python\n"
"from microbit import *"
msgstr ""

#: images.md:95
msgid ""
"boat = Image(\"05050:\"\n"
"             \"05050:\"\n"
"             \"05050:\"\n"
"             \"99999:\"\n"
"             \"09990\")"
msgstr ""

#: images.md:101
msgid ""
"display.show(boat)\n"
"```"
msgstr ""

#: images.md:104
msgid ""
"(When run, the device should display an old-fashioned \"Blue Peter\" sailing "
"ship\n"
"with the masts dimmer than the boat's hull.)"
msgstr ""

#: images.md:107
msgid ""
"Have you figured out how to draw a picture? Have you noticed that each line "
"of\n"
"the physical display is represented by a line of numbers ending in `:` and\n"
"enclosed between `\"` double quotes? Each number specifies a brightness.\n"
"There are five lines of five numbers so it's possible to specify the "
"individual\n"
"brightness for each of the five pixels on each of the five lines on the\n"
"physical display. That's how to create a new image."
msgstr ""

#: images.md:114
msgid "Simple!"
msgstr ""

#: images.md:116
msgid ""
"In fact, you don't need to write this over several lines. If you think you "
"can\n"
"keep track of each line, you can rewrite it like this::"
msgstr ""

#: images.md:119
msgid ""
"```python\n"
"boat = Image(\"05050:05050:05050:99999:09990\")\n"
"```"
msgstr ""

#: images.md:123
msgid "## Animation"
msgstr ""

#: images.md:126
msgid ""
"Static images are fun, but it's even more fun to make them move. This is "
"also\n"
"amazingly simple to do with MicroPython ~ just use a list of images!"
msgstr ""

#: images.md:129
msgid ""
"Here is a shopping list::\n"
"```python\n"
"Eggs\n"
"Bacon\n"
"Tomatoes\n"
"```"
msgstr ""

#: images.md:136
msgid "Here's how you'd represent this list in Python:"
msgstr ""

#: images.md:138
msgid ""
"```python\n"
"shopping = [\"Eggs\", \"Bacon\", \"Tomatoes\" ]\n"
"```"
msgstr ""

#: images.md:142
msgid ""
"I've simply created a list called `shopping` and it contains three items.\n"
"Python knows it's a list because it's enclosed in square brackets (`[` and\n"
"`]`). Items in the list are separated by a comma (`,`) and in this instance\n"
"the items are three strings of characters: `\"Eggs\"`, `\"Bacon\"` and\n"
"`\"Tomatoes\"`. We know they are strings of characters because they're "
"enclosed\n"
"in quotation marks `\"`."
msgstr ""

#: images.md:149
msgid ""
"You can store anything in a list with Python. Here's a list of numbers::"
msgstr ""

#: images.md:151
msgid ""
"```python\n"
"primes = [2, 3, 5, 7, 11, 13, 17, 19]\n"
"```"
msgstr ""

#: images.md:155
msgid "!!! note \"Lưu ý\""
msgstr ""

#: images.md:157
msgid ""
"    Numbers don't need to be quoted since they represent a value (rather "
"than a\n"
"    string of characters). It's the difference between `2` (the numeric "
"value\n"
"    2) and `\"2\"` (the character/digit representing the number 2). Don't "
"worry\n"
"    if this doesn't make sense right now. You'll soon get used to it."
msgstr ""

#: images.md:162
msgid ""
"It's even possible to store different sorts of things in the same list::"
msgstr ""

#: images.md:164
msgid ""
"```python\n"
"mixed_up_list = [\"hello!\", 1.234, Image.HAPPY]\n"
"```"
msgstr ""

#: images.md:168
msgid "Notice that last item? It was an image!"
msgstr ""

#: images.md:170
msgid ""
"We can tell MicroPython to animate a list of images. Luckily we have a\n"
"couple of lists of images already built in. They're called "
"`Image.ALL_CLOCKS`\n"
"and `Image.ALL_ARROWS`::"
msgstr ""

#: images.md:174
msgctxt "images.md:174"
msgid ""
"```python\n"
"from microbit import *"
msgstr ""

#: images.md:177
msgid ""
"display.show(Image.ALL_CLOCKS, loop=True, delay=100)\n"
"```"
msgstr ""

#: images.md:180
msgid ""
"As with a single image, we use `display.show` to show it on the\n"
"device's display. However, we tell MicroPython to use `Image.ALL_CLOCKS` and\n"
"it understands that it needs to show each image in the list, one after the\n"
"other. We also tell MicroPython to keep looping over the list of images (so\n"
"the animation lasts forever) by saying `loop=True`. Furthermore, we tell it\n"
"that we want the delay between each image to be only 100 milliseconds (a "
"tenth\n"
"of a second) with the argument `delay=100`."
msgstr ""

#: images.md:188
msgid ""
"Can you work out how to animate over the `Image.ALL_ARROWS` list? How do you\n"
"avoid looping forever (hint: the opposite of `True` is `False` although\n"
"the default value for `loop` is `False`)? Can you change the speed of the\n"
"animation?"
msgstr ""

#: images.md:193
msgid ""
"Finally, here's how to create your own animation. In my example I'm going to\n"
"make my boat sink into the bottom of the display::"
msgstr ""

#: images.md:196
msgctxt "images.md:196"
msgid ""
"```python\n"
"from microbit import *"
msgstr ""

#: images.md:199
msgid ""
"boat1 = Image(\"05050:\"\n"
"              \"05050:\"\n"
"              \"05050:\"\n"
"              \"99999:\"\n"
"              \"09990\")"
msgstr ""

#: images.md:205
msgid ""
"boat2 = Image(\"00000:\"\n"
"              \"05050:\"\n"
"              \"05050:\"\n"
"              \"05050:\"\n"
"              \"99999\")"
msgstr ""

#: images.md:211
msgid ""
"boat3 = Image(\"00000:\"\n"
"              \"00000:\"\n"
"              \"05050:\"\n"
"              \"05050:\"\n"
"              \"05050\")"
msgstr ""

#: images.md:217
msgid ""
"boat4 = Image(\"00000:\"\n"
"              \"00000:\"\n"
"              \"00000:\"\n"
"              \"05050:\"\n"
"              \"05050\")"
msgstr ""

#: images.md:223
msgid ""
"boat5 = Image(\"00000:\"\n"
"              \"00000:\"\n"
"              \"00000:\"\n"
"              \"00000:\"\n"
"              \"05050\")"
msgstr ""

#: images.md:229
msgid ""
"boat6 = Image(\"00000:\"\n"
"              \"00000:\"\n"
"              \"00000:\"\n"
"              \"00000:\"\n"
"              \"00000\")"
msgstr ""

#: images.md:235
msgid ""
"all_boats = [boat1, boat2, boat3, boat4, boat5, boat6]\n"
"display.show(all_boats, delay=200)\n"
"```"
msgstr ""

#: images.md:239
msgid "Here's how the code works:"
msgstr ""

#: images.md:241
msgid ""
"* I create six `boat` images in exactly the same way I described above.\n"
"* Then, I put them all into a list that I call `all_boats`.\n"
"* Finally, I ask `display.show` to animate the list with a delay of 200 "
"milliseconds.\n"
"* Since I've not set `loop=True` the boat will only sink once (thus making "
"my animation scientifically accurate). :-)"
msgstr ""

#: images.md:246
msgid ""
"What would you animate? Can you animate special effects? How would you make "
"an\n"
"image fade out and then fade in again?"
msgstr ""
